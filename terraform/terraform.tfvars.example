# Terraform Variables Template
# Copy this file to terraform.tfvars and customize with your values
#
# Usage:
#   cp terraform.tfvars.example terraform.tfvars
#   # Edit terraform.tfvars with your values
#   terraform init
#   terraform apply

# ===== Core Demo Configuration =====

# Unique identifier for this demo instance
# Must be lowercase alphanumeric with hyphens only
# Examples: "demo1", "customer-abc", "eval-2025"
demo_id = "demo1"

# Deployment mode: Controls where the application runs
# - "aws"   = Deploy to AWS (RDS + App Runner) - Production-like demo (~$40/month)
# - "local" = Deploy to Docker Compose on localhost - Zero cost, fast setup
#
# IMPORTANT: Set to "local" to skip ALL AWS resource creation (RDS, App Runner, S3, Secrets Manager)
# The Harness pipeline will automatically use the correct deployment logic based on this setting.
deployment_mode = "aws"  # Change to "local" for zero-cost local demos

# AWS region for all resources (only used when deployment_mode = "aws")
aws_region = "us-east-1"

# AWS username for resource tagging (deployed_by tag)
# Tip: Get this automatically with: aws sts get-caller-identity --query UserId --output text
aws_username = "your-aws-username"

# Optional: AWS CLI profile to use for authentication
# If not specified, uses default AWS credentials
# aws_profile = "liquibase-csteam-operator"

# ===== Database Configuration =====

# RDS master username
db_username = "postgres"

# RDS master password (will be stored in AWS Secrets Manager)
# Use a strong password - this is for demo purposes only
db_password = "ChangeMe123!SecurePassword"

# Optional: RDS instance size (default: db.t3.micro)
# db_instance_class = "db.t3.micro"

# Optional: RDS storage in GB (default: 20)
# db_allocated_storage = 20

# ===== Application Configuration =====

# GitHub organization or username
github_org = "your-github-org"

# GitHub repository name (usually same as local folder name)
# Important: This will change if someone clones/forks the repo
github_repo = "harness-gha-bagelstore"

# GitHub username for Harness connector authentication
github_username = "your-github-username"

# GitHub Personal Access Token
# Required scopes: repo, read:packages, packages:read
# Create at: https://github.com/settings/tokens
github_pat = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Optional: App Runner CPU (1024 = 1 vCPU)
# app_runner_cpu = 1024

# Optional: App Runner memory in MB
# app_runner_memory = 2048

# ===== DNS Configuration (Optional) =====

# Enable Route53 DNS records for custom domains
# Set to false to use App Runner default URLs (no Route53 permissions needed)
enable_route53 = false

# Only required if enable_route53 = true
# Uncomment and configure these values:
# domain_name = "bagel-demo.example.com"
# route53_zone_id = "Z1234567890ABC"  # Find with: aws route53 list-hosted-zones

# ===== Harness Configuration =====
# Required to automatically configure Harness environments with AWS infrastructure outputs

# Harness account ID
# Find this in your Harness URL: https://app.harness.io/ng/account/YOUR_ACCOUNT_ID/...
# Or go to: Account Settings → Overview
harness_account_id = "your-harness-account-id"

# Harness Platform API key
# Create at: Profile → My API Keys → New API Key
# Or use Service Account Token for automation
# Required scopes: Environment (View, Create/Edit), Project (View)
harness_api_key = "pat.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Harness organization ID
# Default organization is usually "default"
# Find in Harness UI: check URL or Organization Settings
harness_org_id = "default"

# Harness project ID
# This is the project where environments will be created
# Create project first in Harness UI, then use its identifier here
# Example: "bagel_store_demo"
harness_project_id = "bagel_store_demo"

# ===== AWS Credentials for Harness =====
# These credentials are stored as Harness secrets and used by the deployment pipeline
# They should have permissions for: App Runner, RDS, Secrets Manager, S3

# AWS Access Key ID for Harness deployments
# Same credentials can be used as for Terraform, or use separate deployment credentials
aws_access_key_id = "AKIAXXXXXXXXXXXX"

# AWS Secret Access Key for Harness deployments
aws_secret_access_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# ===== Liquibase Configuration =====

# Liquibase Secure/Pro license key
# Required for: Flow files, policy checks, operation reports
# Get free trial: https://www.liquibase.com/trial
liquibase_license_key = "YOUR_LIQUIBASE_LICENSE_KEY_HERE"

# ===== Optional: Custom Tags =====

# Uncomment to override default tags or add custom tags
# common_tags = {
#   Account     = "my-account-name"
#   project     = "bagel-store-demo"
#   managed_by  = "terraform"
#   cost_center = "engineering"
# }
