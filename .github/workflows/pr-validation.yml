name: PR Validation - Liquibase Policy Checks

on:
  pull_request:
    branches:
      - main
    paths:
      - 'db/changelog/**'
      - 'liquibase-flows/**'
      - '.github/workflows/pr-validation.yml'

permissions:
  contents: read
  pull-requests: write

env:
  LIQUIBASE_VERSION: "5.0.1"
  POSTGRES_VERSION: "16"

jobs:
  validate-changelog:
    name: Validate Changelog with Policy Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Verify database connection
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d dev -c "SELECT version();"

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run Liquibase PR Validation Flow
        env:
          LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_LICENSE_KEY }}
          LIQUIBASE_COMMAND_URL: jdbc:postgresql://localhost:5432/dev
          LIQUIBASE_COMMAND_USERNAME: postgres
          LIQUIBASE_COMMAND_PASSWORD: postgres
          LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog-master.yaml
          LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE: /liquibase/flows/liquibase.checks-settings.conf
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/db/changelog:/liquibase/changelog \
            -v ${{ github.workspace }}/liquibase-flows:/liquibase/flows \
            -v ${{ github.workspace }}/reports:/liquibase/reports \
            -e LIQUIBASE_LICENSE_KEY="${LIQUIBASE_LICENSE_KEY}" \
            -e LIQUIBASE_COMMAND_URL="${LIQUIBASE_COMMAND_URL}" \
            -e LIQUIBASE_COMMAND_USERNAME="${LIQUIBASE_COMMAND_USERNAME}" \
            -e LIQUIBASE_COMMAND_PASSWORD="${LIQUIBASE_COMMAND_PASSWORD}" \
            -e LIQUIBASE_COMMAND_CHANGELOG_FILE="${LIQUIBASE_COMMAND_CHANGELOG_FILE}" \
            -e LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE="${LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE}" \
            -w /liquibase/changelog \
            liquibase/liquibase-secure:${{ env.LIQUIBASE_VERSION }} \
            flow \
            --flow-file=/liquibase/flows/pr-validation-flow.yaml

      - name: Check for policy check failures
        if: failure()
        run: |
          echo "::error::❌ Liquibase policy checks failed with BLOCKER violations"
          echo "Review the operation reports for details on which checks failed."
          exit 1

      - name: Upload operation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-validation-reports-${{ github.event.pull_request.number }}
          path: reports/*.html
          retention-days: 30

      - name: Add PR comment with results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'reports/pr-policy-report.html';

            let status = '✅ PASSED';
            let color = '28a745';

            if ('${{ job.status }}' === 'failure') {
              status = '❌ FAILED';
              color = 'd73a49';
            }

            const body = `## Liquibase PR Validation ${status}

            **PR #${{ github.event.pull_request.number }}** - Changelog policy check results

            ![Status](https://img.shields.io/badge/Policy%20Checks-${status.replace(' ', '%20')}-${color})

            ### Summary
            - **12 BLOCKER-level policy checks** executed
            - **Environment:** PostgreSQL ${{ env.POSTGRES_VERSION }}
            - **Liquibase:** Secure ${{ env.LIQUIBASE_VERSION }}

            ### Reports Generated
            - Connection Report: \`pr-connection-report.html\`
            - Validation Report: \`pr-validation-report.html\`
            - Status Report: \`pr-status-report.html\`
            - Policy Check Report: \`pr-policy-report.html\`

            📊 Download artifacts from the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) to view detailed HTML reports.

            ---
            🤖 Generated by [GitHub Actions](https://github.com/features/actions) | Run ID: ${{ github.run_id }}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 📋 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Liquibase Version:** Secure ${{ env.LIQUIBASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Policy Checks Executed" >> $GITHUB_STEP_SUMMARY
          echo "- ChangeDropColumnWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- ChangeDropTableWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- ChangeTruncateTableWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- CheckTablesForIndex (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- ModifyDataTypeWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- RollbackRequired (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- SqlGrantAdminWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- SqlGrantOptionWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- SqlGrantWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- SqlRevokeWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- SqlSelectStarWarn (BLOCKER)" >> $GITHUB_STEP_SUMMARY
          echo "- TableColumnLimit (BLOCKER - max 50 columns)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Reports" >> $GITHUB_STEP_SUMMARY
          echo "View detailed HTML reports in workflow artifacts." >> $GITHUB_STEP_SUMMARY
